rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      match /posts/{postId} {
        allow read;
      }

      // Creating user rule
      match /users/{userId} {
        allow read;
        allow create: if isValidUser(userId);
      }

      // Creating username rule
      match /usernames/{username} {
        allow read;
        allow create: if isValidUsername(username);
      }

      // Amending post rule
      match /users/{userId}/posts/{postId} {
        allow read;
        allow create: if canCreatePost(userId);
        allow update: if canUpdatePost(userId) || canIncrementLikes(userId, postId);
        allow delete: if request.auth.uid == userId;
      }

      // Like rules
       match /users/{userId}/posts/{postId}/likes/{likeId} {
      		allow read;
        	allow write: if request.auth.uid == likeId;
      }

      function isValidUser(userId) {
        let isOwner = request.auth.uid == userId;
      	let username = request.resource.data.username;
        // Make sure username & user are created at the same time 
        let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));
        return isOwner && createdValidUsername;
      }

       function isValidUsername(username) {
				let isOwner = request.auth.uid == request.resource.data.uid;
        let isValidLength = username.size() >= 3 && username.size() <= 15;
        // Ensure username = username on user doc
        let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        return isOwner && isValidLength && isValidUserDoc;     
      }

      function canCreatePost(userId) {
        let isOwner = request.auth.uid == userId;
        let isNow = request.time == request.resource.data.createdAt;
        let isValidContent = request.resource.data.content.size() < 20000 && request.resource.data.likeCount == 0;
        let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
        let usernameMatches = username == request.resource.data.username;
      	return isOwner && isNow && isValidContent && usernameMatches;
      }
      
      function canUpdatePost(userId) {
        let isOwner = request.auth.uid == userId;
      	let isNow = request.time == request.resource.data.updatedAt;
        let isValidContent = request.resource.data.content.size() < 20000;
        let doesNotUpdateForbidden = !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'username', 'likeCount']);
        return isOwner && isNow && isValidContent && doesNotUpdateForbidden;
      }
      
      function canIncrementLikes(userId, postId) {
				let hasValidFields = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount']);
        let currentUser = request.auth.uid;
        // Get like doc after batch commit 
				let likeDocExistsAfter = existsAfter(/databases/$(database)/documents/users/$(userId)/posts/$(postId)/likes/$(currentUser));
        // Get orignal like doc 
        let likeDocExists = exists(/databases/$(database)/documents/users/$(userId)/posts/$(postId)/likes/$(currentUser));
        let likeDocAdded = !likeDocExists && likeDocExistsAfter;
        let likeDocRemoved = likeDocExists && !likeDocExistsAfter;
        let countChange = request.resource.data.likeCount - resource.data.likeCount;
        let validChange = countChange == 1 || countChange == -1;
        return hasValidFields && validChange && ( countChange == 1 ? likeDocAdded : likeDocRemoved );
      }
    }
  }
}